/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface FcbInput {
    /**
    * If set to false, it will only allow whole numbers. Default to allow decimal/floating values
    */
    'allowDecimal': boolean;
    /**
    * If set to false, it only accept non-negative values. Default to allow (-) character
    */
    'allowNegative': boolean;
    /**
    * If `true`, it will select the value of the input if focus. It is default to select/true.
    */
    'autoselect': boolean;
    /**
    * If `true`, the value will be cleared after focus upon edit.
    */
    'clearOnEdit'?: boolean;
    /**
    * If `true`, the user cannot intercat with the input.
    */
    'disabled': boolean;
    'displayType'?: "dollar" | "time";
    /**
    * If `true`, the user cannot modify the value.
    */
    'readonly': boolean;
    'value'?: string | null;
  }
  interface FcbSpinner {
    /**
    * If `true`, then spinner will show.
    */
    'show': boolean;
  }
  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
}

declare global {


  interface HTMLFcbInputElement extends Components.FcbInput, HTMLStencilElement {}
  var HTMLFcbInputElement: {
    prototype: HTMLFcbInputElement;
    new (): HTMLFcbInputElement;
  };

  interface HTMLFcbSpinnerElement extends Components.FcbSpinner, HTMLStencilElement {}
  var HTMLFcbSpinnerElement: {
    prototype: HTMLFcbSpinnerElement;
    new (): HTMLFcbSpinnerElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLElementTagNameMap {
    'fcb-input': HTMLFcbInputElement;
    'fcb-spinner': HTMLFcbSpinnerElement;
    'my-component': HTMLMyComponentElement;
  }
}

declare namespace LocalJSX {
  interface FcbInput {
    /**
    * If set to false, it will only allow whole numbers. Default to allow decimal/floating values
    */
    'allowDecimal'?: boolean;
    /**
    * If set to false, it only accept non-negative values. Default to allow (-) character
    */
    'allowNegative'?: boolean;
    /**
    * If `true`, it will select the value of the input if focus. It is default to select/true.
    */
    'autoselect'?: boolean;
    /**
    * If `true`, the value will be cleared after focus upon edit.
    */
    'clearOnEdit'?: boolean;
    /**
    * If `true`, the user cannot intercat with the input.
    */
    'disabled'?: boolean;
    'displayType'?: "dollar" | "time";
    /**
    * Emitted when the input loses focus.
    */
    'onFcbBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when ENTER or TAB key is pressed, returns the current value.
    */
    'onFcbEnter'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the input as focus.
    */
    'onFcbFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Event emitted on keyboard input.
    */
    'onFcbInput'?: (event: CustomEvent<KeyboardEvent>) => void;
    /**
    * If `true`, the user cannot modify the value.
    */
    'readonly'?: boolean;
    'value'?: string | null;
  }
  interface FcbSpinner {
    /**
    * If `true`, then spinner will show.
    */
    'show'?: boolean;
  }
  interface MyComponent {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }

  interface IntrinsicElements {
    'fcb-input': FcbInput;
    'fcb-spinner': FcbSpinner;
    'my-component': MyComponent;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'fcb-input': LocalJSX.FcbInput & JSXBase.HTMLAttributes<HTMLFcbInputElement>;
      'fcb-spinner': LocalJSX.FcbSpinner & JSXBase.HTMLAttributes<HTMLFcbSpinnerElement>;
      'my-component': LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
    }
  }
}


